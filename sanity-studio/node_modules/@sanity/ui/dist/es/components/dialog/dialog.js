var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { CloseIcon } from '@sanity/icons';
import React, { forwardRef, useCallback, useEffect, useRef, useState } from 'react';
import styled from 'styled-components';
import { focusFirstDescendant, focusLastDescendant } from '../../helpers';
import { useClickOutside, useGlobalKeyDown } from '../../hooks';
import { Box, Button, Card, Container, Flex, Text } from '../../primitives';
import { responsivePaddingStyle } from '../../styles/internal';
import { Layer, Portal, useLayer } from '../../utils';
import { dialogStyle, responsiveDialogPositionStyle, } from './styles';
const Root = styled(Layer)(responsivePaddingStyle, dialogStyle, responsiveDialogPositionStyle);
const DialogContainer = styled(Container) `
  &:not([hidden]) {
    display: flex;
  }
  width: 100%;
  height: 100%;
  flex-direction: column;
  align-items: center;
  justify-content: center;
`;
const DialogCardRoot = styled(Card) `
  &:not([hidden]) {
    display: flex;
  }
  width: 100%;
  min-height: 0;
  max-height: 100%;
  overflow: hidden;
`;
const DialogLayout = styled(Flex) `
  flex: 1;
  min-height: 0;
  width: 100%;
`;
const DialogHeader = styled(Card) `
  position: relative;

  &:after {
    content: '';
    display: block;
    position: absolute;
    left: 0;
    right: 0;
    bottom: -1px;
    border-bottom: 1px solid var(--card-hairline-soft-color);
  }
`;
const DialogContent = styled(Box) `
  overflow: auto;
  outline: none;
`;
const DialogFooter = styled(Box) `
  border-top: 1px solid var(--card-hairline-soft-color);
`;
const DialogCard = forwardRef((props, ref) => {
    const { children, contentRef, footer, header, id, onClickOutside, onClose, radius, scheme, shadow, width, } = props;
    const [rootElement, setRootElement] = useState(null);
    const localContentRef = useRef(null);
    const layer = useLayer();
    const { isTopLayer } = layer;
    const labelId = `${id}_label`;
    useEffect(() => {
        // On mount: focus the first interactive element in the contents
        if (localContentRef.current) {
            focusFirstDescendant(localContentRef.current);
        }
    }, []);
    useGlobalKeyDown(useCallback((event) => {
        if (!isTopLayer)
            return;
        if (event.key === 'Escape') {
            event.preventDefault();
            event.stopPropagation();
            if (onClose)
                onClose();
        }
    }, [isTopLayer, onClose]));
    useClickOutside(useCallback(() => {
        if (!isTopLayer)
            return;
        if (onClickOutside) {
            onClickOutside();
        }
    }, [isTopLayer, onClickOutside]), [rootElement]);
    const setRef = useCallback((el) => {
        setRootElement(el);
        if (typeof ref === 'function')
            ref(el);
        else if (ref)
            ref.current = el;
    }, [ref]);
    const setContentRef = useCallback((el) => {
        localContentRef.current = el;
        if (typeof contentRef === 'function')
            contentRef(el);
        else if (contentRef)
            contentRef.current = el;
    }, [contentRef]);
    return (React.createElement(DialogContainer, { "data-ui": "DialogCard", width: width },
        React.createElement(DialogCardRoot, { radius: radius, ref: setRef, scheme: scheme, shadow: shadow },
            React.createElement(DialogLayout, { direction: "column" },
                React.createElement(DialogHeader, null,
                    React.createElement(Flex, null,
                        React.createElement(Box, { flex: 1, padding: 4 }, header && (React.createElement(Text, { id: labelId, weight: "semibold" }, header))),
                        React.createElement(Box, { padding: 2 },
                            React.createElement(Button, { "aria-label": "Close dialog", icon: CloseIcon, mode: "bleed", onClick: onClose, padding: 3 })))),
                React.createElement(DialogContent, { flex: 1, ref: setContentRef, tabIndex: -1 }, children),
                footer && React.createElement(DialogFooter, null, footer)))));
});
DialogCard.displayName = 'DialogCard';
export const Dialog = forwardRef((props, ref) => {
    const { cardRadius = 3, cardShadow = 4, children, contentRef, footer, header, id, onClickOutside, onClose, padding = 4, position = 'fixed', scheme, width = 0 } = props, restProps = __rest(props, ["cardRadius", "cardShadow", "children", "contentRef", "footer", "header", "id", "onClickOutside", "onClose", "padding", "position", "scheme", "width"]);
    const preDivRef = useRef(null);
    const postDivRef = useRef(null);
    const cardRef = useRef(null);
    const handleFocus = useCallback((event) => {
        const target = event.target;
        const cardElement = cardRef.current;
        if (!cardElement) {
            return;
        }
        if (target === preDivRef.current) {
            focusLastDescendant(cardElement);
            return;
        }
        if (target === postDivRef.current) {
            focusFirstDescendant(cardElement);
            return;
        }
    }, []);
    const labelId = `${id}_label`;
    return (React.createElement(Portal, null,
        React.createElement(Root, Object.assign({}, restProps, { "$padding": padding, "$position": position, "aria-labelledby": labelId, "aria-modal": true, "data-ui": "Dialog", id: id, onFocus: handleFocus, ref: ref, role: "dialog" }),
            React.createElement("div", { ref: preDivRef, tabIndex: 0 }),
            React.createElement(DialogCard, { contentRef: contentRef, footer: footer, header: header, id: id, onClickOutside: onClickOutside, onClose: onClose, radius: cardRadius, ref: cardRef, scheme: scheme, shadow: cardShadow, width: width }, children),
            React.createElement("div", { ref: postDivRef, tabIndex: 0 }))));
});
Dialog.displayName = 'Dialog';
//# sourceMappingURL=dialog.js.map