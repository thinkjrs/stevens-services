var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from 'react';
import styled from 'styled-components';
import { useForwardedRef, useCustomValidity } from '../../hooks';
import { radioBaseStyle, inputElementStyle } from './styles';
const Root = styled.div(radioBaseStyle);
const Input = styled.input(inputElementStyle);
export const Radio = forwardRef((props, forwardedRef) => {
    const { className, disabled, style, customValidity, readOnly } = props, restProps = __rest(props, ["className", "disabled", "style", "customValidity", "readOnly"]);
    const ref = useForwardedRef(forwardedRef);
    useCustomValidity(ref, customValidity);
    return (React.createElement(Root, { className: className, "data-ui": "Radio", style: style },
        React.createElement(Input, Object.assign({ "data-read-only": !disabled && readOnly ? '' : undefined }, restProps, { disabled: disabled || readOnly, readOnly: readOnly, ref: ref, type: "radio" })),
        React.createElement("span", null)));
});
Radio.displayName = 'Radio';
//# sourceMappingURL=radio.js.map