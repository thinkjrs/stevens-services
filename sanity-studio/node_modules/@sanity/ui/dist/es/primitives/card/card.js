var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from 'react';
import { isValidElementType } from 'react-is';
import styled from 'styled-components';
import { responsiveBorderStyle, responsiveRadiusStyle, responsiveShadowStyle, } from '../../styles/internal';
import { ThemeColorProvider, useRootTheme } from '../../theme';
import { Box } from '../box';
import { cardStyle } from './styles';
const Root = styled(Box)(responsiveBorderStyle, responsiveRadiusStyle, responsiveShadowStyle, cardStyle);
export const Card = forwardRef((props, ref) => {
    const { as: asProp, border, borderTop, borderRight, borderBottom, borderLeft, radius = 0, scheme, shadow, tone: toneProp = 'default' } = props, restProps = __rest(props, ["as", "border", "borderTop", "borderRight", "borderBottom", "borderLeft", "radius", "scheme", "shadow", "tone"]);
    const as = isValidElementType(asProp) ? asProp : 'div';
    const rootTheme = useRootTheme();
    const tone = toneProp === 'inherit' ? rootTheme.tone : toneProp;
    return (React.createElement(ThemeColorProvider, { scheme: scheme, tone: tone },
        React.createElement(Root, Object.assign({ "data-as": typeof as === 'string' ? as : undefined, "data-scheme": rootTheme.scheme, "data-ui": "Card", "data-tone": tone }, restProps, { "$border": border, "$borderTop": borderTop, "$borderRight": borderRight, "$borderBottom": borderBottom, "$borderLeft": borderLeft, "$radius": radius, "$shadow": shadow, "$tone": tone, forwardedAs: as, ref: ref }))));
});
Card.displayName = 'Card';
//# sourceMappingURL=card.js.map