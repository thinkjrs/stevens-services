var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from 'react';
import styled from 'styled-components';
import { flexItemStyle, responsiveBoxStyle, responsiveGridItemStyle, responsivePaddingStyle, responsiveMarginStyle, } from '../../styles/internal';
const Root = styled.div(flexItemStyle, responsiveBoxStyle, responsiveGridItemStyle, responsiveMarginStyle, responsivePaddingStyle);
export const Box = forwardRef((props, ref) => {
    const { as: asProp = 'div', column, columnStart, columnEnd, display = 'block', flex, height, margin = 0, marginX, marginY, marginTop, marginRight, marginBottom, marginLeft, overflow, padding = 0, paddingX, paddingY, paddingTop, paddingRight, paddingBottom, paddingLeft, row, rowStart, rowEnd, sizing } = props, restProps = __rest(props, ["as", "column", "columnStart", "columnEnd", "display", "flex", "height", "margin", "marginX", "marginY", "marginTop", "marginRight", "marginBottom", "marginLeft", "overflow", "padding", "paddingX", "paddingY", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "row", "rowStart", "rowEnd", "sizing"]);
    return (React.createElement(Root, Object.assign({ "data-ui": "Box" }, restProps, { "$column": column, "$columnStart": columnStart, "$columnEnd": columnEnd, "$display": display, "$flex": flex, "$height": height, "$margin": margin, "$marginX": marginX, "$marginY": marginY, "$marginTop": marginTop, "$marginRight": marginRight, "$marginBottom": marginBottom, "$marginLeft": marginLeft, "$overflow": overflow, "$padding": padding, "$paddingX": paddingX, "$paddingY": paddingY, "$paddingTop": paddingTop, "$paddingRight": paddingRight, "$paddingBottom": paddingBottom, "$paddingLeft": paddingLeft, "$row": row, "$rowStart": rowStart, "$rowEnd": rowEnd, "$sizing": sizing, as: asProp, ref: ref }), props.children));
});
Box.displayName = 'Box';
//# sourceMappingURL=box.js.map