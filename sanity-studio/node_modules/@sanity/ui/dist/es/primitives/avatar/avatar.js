var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { useId } from '@reach/auto-id';
import React, { forwardRef, useCallback, useEffect, useState } from 'react';
import ReactIs from 'react-is';
import styled from 'styled-components';
import { useResponsiveProp } from '../../hooks';
import { useTheme } from '../../theme';
import { Text } from '../text';
import { avatarStyle, responsiveAvatarSizeStyle } from './styles';
const Root = styled.div(responsiveAvatarSizeStyle, avatarStyle.root);
const Arrow = styled.div(avatarStyle.arrow);
const BgStroke = styled.ellipse(avatarStyle.bgStroke);
const Stroke = styled.ellipse(avatarStyle.stroke);
const Initials = styled.div(avatarStyle.initials);
export const Avatar = forwardRef((props, ref) => {
    const { as: asProp, color: colorKey = 'gray', src, title, initials, onImageLoadError, arrowPosition: arrowPositionProp, animateArrowFrom, status = 'online', size: sizeProp } = props, restProps = __rest(props, ["as", "color", "src", "title", "initials", "onImageLoadError", "arrowPosition", "animateArrowFrom", "status", "size"]);
    const as = ReactIs.isValidElementType(asProp) ? asProp : 'div';
    const size = useResponsiveProp(sizeProp, [0]);
    const theme = useTheme();
    const color = theme.sanity.color.spot[colorKey] || theme.sanity.color.spot.gray;
    // @todo: remove this
    const avatarSize = theme.sanity.avatar.sizes[size[0]] || theme.sanity.avatar.sizes[0];
    const _sizeRem = avatarSize.size;
    const _radius = _sizeRem / 2;
    const elementId = useId() || '';
    const [arrowPosition, setArrowPosition] = useState(animateArrowFrom || arrowPositionProp || 'inside');
    const [imageFailed, setImageFailed] = useState(false);
    const imageId = `avatar-image-${elementId}`;
    useEffect(() => {
        if (arrowPosition === arrowPositionProp)
            return undefined;
        // Start animation in the next frame
        const raf = requestAnimationFrame(() => setArrowPosition(arrowPositionProp));
        return () => cancelAnimationFrame(raf);
    }, [arrowPosition, arrowPositionProp]);
    useEffect(() => {
        if (src)
            setImageFailed(false);
    }, [src]);
    const handleImageError = useCallback(() => {
        setImageFailed(true);
        if (onImageLoadError) {
            onImageLoadError(new Error('Avatar: the image failed to load'));
        }
    }, [onImageLoadError]);
    return (React.createElement(Root, Object.assign({ as: as, "data-as": typeof as === 'string' ? as : undefined, "data-ui": "Avatar" }, restProps, { "$size": size, "$color": color, "aria-label": title, "data-arrow-position": arrowPosition, "data-status": status, ref: ref, title: title }),
        React.createElement(Arrow, null,
            React.createElement("svg", { width: "11", height: "7", viewBox: "0 0 11 7", fill: "none" },
                React.createElement("path", { d: "M6.67948 1.50115L11 7L0 7L4.32052 1.50115C4.92109 0.736796 6.07891 0.736795 6.67948 1.50115Z", fill: color }))),
        !imageFailed && src && (React.createElement("svg", { viewBox: `0 0 ${_sizeRem} ${_sizeRem}`, fill: "none" },
            React.createElement("defs", null,
                React.createElement("pattern", { id: imageId, patternContentUnits: "objectBoundingBox", width: "1", height: "1" },
                    React.createElement("image", { href: src, width: "1", height: "1", onError: handleImageError }))),
            React.createElement("circle", { cx: _radius, cy: _radius, r: _radius, fill: `url(#${imageId})` }),
            React.createElement(BgStroke, { cx: _radius, cy: _radius, rx: _radius, ry: _radius, vectorEffect: "non-scaling-stroke" }),
            React.createElement(Stroke, { cx: _radius, cy: _radius, rx: _radius, ry: _radius, stroke: color, vectorEffect: "non-scaling-stroke" }))),
        (imageFailed || !src) && initials && (React.createElement(React.Fragment, null,
            React.createElement(Initials, null,
                React.createElement(Text, { as: "span", size: size.map((s) => (s === 0 ? 0 : s + 1)) },
                    React.createElement("strong", null, initials)))))));
});
Avatar.displayName = 'Avatar';
//# sourceMappingURL=avatar.js.map