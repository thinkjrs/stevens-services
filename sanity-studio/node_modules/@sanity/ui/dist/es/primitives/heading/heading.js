var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from 'react';
import styled from 'styled-components';
import { responsiveHeadingFont, responsiveTextAlignStyle, } from '../../styles/internal';
import { headingBaseStyle } from './styles';
const Root = styled.div(headingBaseStyle, responsiveTextAlignStyle, responsiveHeadingFont);
const SpanWithTextOverflow = styled.span `
  display: block;
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
`;
export const Heading = forwardRef((props, ref) => {
    const { accent = false, align, children: childrenProp, muted = false, size = 2, textOverflow, weight } = props, restProps = __rest(props, ["accent", "align", "children", "muted", "size", "textOverflow", "weight"]);
    let children = childrenProp;
    if (textOverflow === 'ellipsis') {
        children = React.createElement(SpanWithTextOverflow, null, children);
    }
    return (React.createElement(Root, Object.assign({ "data-ui": "Heading" }, restProps, { "$accent": accent, "$align": align, "$muted": muted, "$size": size, "$weight": weight, ref: ref }), children));
});
Heading.displayName = 'Heading';
//# sourceMappingURL=heading.js.map