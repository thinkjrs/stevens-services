var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { useMemo } from 'react';
import { ThemeProvider as StyledThemeProvider } from 'styled-components';
import { ThemeContext } from './themeContext';
export function ThemeProvider(props) {
    const { children, scheme = 'light', theme: rootTheme, tone = 'default' } = props;
    const theme = useMemo(() => {
        const { color: rootColor } = rootTheme, restTheme = __rest(rootTheme, ["color"]);
        const colorScheme = rootColor[scheme] || rootColor.light;
        const color = colorScheme[tone] || colorScheme.default;
        return { sanity: Object.assign(Object.assign({}, restTheme), { color }) };
    }, [rootTheme, scheme, tone]);
    const value = useMemo(() => ({
        version: 0.0,
        theme: rootTheme,
        scheme,
        tone,
    }), [rootTheme, scheme, tone]);
    return (React.createElement(ThemeContext.Provider, { value: value },
        React.createElement(StyledThemeProvider, { theme: theme }, children)));
}
//# sourceMappingURL=themeProvider.js.map