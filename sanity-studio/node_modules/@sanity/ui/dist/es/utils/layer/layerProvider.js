import React, { useCallback, useContext, useEffect, useMemo, useState } from 'react';
import { LayerContext } from './layerContext';
export function LayerProvider({ children, zOffset = 0, }) {
    const parent = useContext(LayerContext);
    const zIndex = parent ? parent.zIndex + zOffset : zOffset;
    const [size, setSize] = useState(0);
    const registerChild = useCallback(() => {
        setSize((v) => v + 1);
        return () => setSize((v) => v - 1);
    }, []);
    const parentRegisterChild = parent === null || parent === void 0 ? void 0 : parent.registerChild;
    useEffect(() => {
        if (!parentRegisterChild)
            return;
        return parentRegisterChild();
    }, [parentRegisterChild]);
    const value = useMemo(() => ({ version: 0.0, isTopLayer: size === 0, registerChild, size, zIndex }), [size, registerChild, zIndex]);
    return React.createElement(LayerContext.Provider, { value: value }, children);
}
//# sourceMappingURL=layerProvider.js.map