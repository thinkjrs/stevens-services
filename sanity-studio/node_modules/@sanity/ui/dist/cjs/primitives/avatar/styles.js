"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.avatarInitialsStyle = exports.responsiveAvatarSizeStyle = exports.avatarRootStyle = exports.avatarStyle = void 0;
var styles_1 = require("../../styles");
var internal_1 = require("../../styles/internal");
exports.avatarStyle = {
    root: avatarRootStyle,
    arrow: avatarArrowStyle,
    bgStroke: avatarBgStrokeStyle,
    stroke: avatarStrokeStyle,
    initials: avatarInitialsStyle,
};
function avatarArrowStyle() {
    return {
        position: 'absolute',
        boxSizing: 'border-box',
        zIndex: 0,
        opacity: 0,
        transition: 'all 0.2s linear',
        transform: 'rotate(-90deg) translate3d(0, 6px, 0)',
        left: 0,
        right: 0,
        top: 0,
        bottom: 0,
        '& > svg': {
            width: '11px',
            height: '7px',
            position: 'absolute',
            top: '-5px',
            left: '50%',
            transform: 'translateX(-6px)',
            '&:not([hidden])': {
                display: 'block',
            },
        },
        "[data-arrow-position='inside'] > &": {
            transform: 'rotate(-90deg) translate3d(0, 6px, 0)',
            opacity: 0,
        },
        "[data-arrow-position='top'] > &": {
            opacity: 1,
            transform: 'rotate(0deg)',
        },
        "[data-arrow-position='bottom'] > &": {
            opacity: 1,
            transform: 'rotate(-180deg)',
        },
    };
}
function avatarRootStyle(props) {
    var $color = props.$color, theme = props.theme;
    var focusRing = theme.sanity.focusRing;
    return {
        backgroundColor: $color,
        position: 'relative',
        boxSizing: 'border-box',
        userSelect: 'none',
        boxShadow: '0 0 0 1px var(--card-bg-color)',
        '&[data-status="inactive"]': {
            opacity: 0.5,
        },
        '&>svg': {
            '&:not([hidden])': {
                display: 'block',
            },
        },
        /* &:is(button) */
        '&[data-as="button"]': {
            '-webkit-font-smoothing': 'inherit',
            appearance: 'none',
            margin: 0,
            padding: 0,
            border: 0,
            font: 'inherit',
            color: 'inherit',
            outline: 'none',
            '&:focus': {
                boxShadow: internal_1.focusRingStyle({ focusRing: focusRing }),
            },
            '&:focus:not(:focus-visible)': {
                boxShadow: 'none',
            },
        },
    };
}
exports.avatarRootStyle = avatarRootStyle;
function responsiveAvatarSizeStyle(props) {
    var theme = props.theme;
    var _a = theme.sanity, avatar = _a.avatar, media = _a.media;
    return styles_1.responsive(media, props.$size, function (size) {
        var avatarSize = avatar.sizes[size] || avatar.sizes[0];
        return {
            width: styles_1.rem(avatarSize.size),
            height: styles_1.rem(avatarSize.size),
            borderRadius: styles_1.rem(avatarSize.size / 2),
            '&>svg': {
                width: styles_1.rem(avatarSize.size),
                height: styles_1.rem(avatarSize.size),
                borderRadius: styles_1.rem(avatarSize.size / 2),
            },
        };
    });
}
exports.responsiveAvatarSizeStyle = responsiveAvatarSizeStyle;
function avatarInitialsStyle(props) {
    var theme = props.theme;
    var base = theme.sanity.color.base;
    return {
        width: '100%',
        height: '100%',
        color: base.fg,
        alignItems: 'center',
        justifyContent: 'center',
        textTransform: 'uppercase',
        textAlign: 'center',
        borderRadius: '50%',
        '&:not([hidden])': {
            display: 'flex',
        },
    };
}
exports.avatarInitialsStyle = avatarInitialsStyle;
function avatarBgStrokeStyle() {
    return {
        strokeWidth: '4px',
        stroke: 'var(--card-bg-color)',
    };
}
function avatarStrokeStyle() {
    return {
        strokeWidth: '3px',
        '[data-status="editing"] &': {
            strokeSasharray: '2 4',
            strokeLinecap: 'round',
        },
    };
}
//# sourceMappingURL=styles.js.map