"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.textInputStyle = void 0;
var styled_components_1 = require("styled-components");
var focusRing_1 = require("../focusRing");
var helpers_1 = require("../helpers");
exports.textInputStyle = {
    root: function () { return [rootStyle]; },
    input: function () { return [inputBaseStyle, inputFontSizeStyle]; },
    representation: [representationStyle],
};
var ROOT_STYLE = styled_components_1.css(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  &:not([hidden]) {\n    display: flex;\n  }\n"], ["\n  &:not([hidden]) {\n    display: flex;\n  }\n"])));
function rootStyle() {
    return ROOT_STYLE;
}
function inputBaseStyle(props) {
    var theme = props.theme, $weight = props.$weight;
    var font = theme.sanity.fonts.text;
    var color = theme.sanity.color.input;
    return styled_components_1.css(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n    --input-placeholder-color: ", ";\n\n    appearance: none;\n    background: none;\n    border: 0;\n    border-radius: 0;\n    outline: none;\n    width: 100%;\n    box-sizing: border-box;\n    font-family: ", ";\n    font-weight: ", ";\n    margin: 0;\n    position: relative;\n    z-index: 1;\n    display: block;\n\n    &::placeholder {\n      color: var(--input-placeholder-color);\n    }\n\n    /* &:is(textarea) */\n    &[data-as='textarea'] {\n      resize: none;\n    }\n\n    /* enabled */\n    &:not(:invalid):not(:disabled) {\n      color: ", ";\n      --input-placeholder-color: ", ";\n    }\n\n    /* disabled */\n    &:not(:invalid):disabled {\n      color: ", ";\n      --input-placeholder-color: ", ";\n    }\n\n    /* invalid */\n    &:invalid {\n      color: ", ";\n      --input-placeholder-color: ", ";\n    }\n  "], ["\n    --input-placeholder-color: ", ";\n\n    appearance: none;\n    background: none;\n    border: 0;\n    border-radius: 0;\n    outline: none;\n    width: 100%;\n    box-sizing: border-box;\n    font-family: ", ";\n    font-weight: ", ";\n    margin: 0;\n    position: relative;\n    z-index: 1;\n    display: block;\n\n    &::placeholder {\n      color: var(--input-placeholder-color);\n    }\n\n    /* &:is(textarea) */\n    &[data-as='textarea'] {\n      resize: none;\n    }\n\n    /* enabled */\n    &:not(:invalid):not(:disabled) {\n      color: ", ";\n      --input-placeholder-color: ", ";\n    }\n\n    /* disabled */\n    &:not(:invalid):disabled {\n      color: ", ";\n      --input-placeholder-color: ", ";\n    }\n\n    /* invalid */\n    &:invalid {\n      color: ", ";\n      --input-placeholder-color: ", ";\n    }\n  "])), color.default.enabled.placeholder, font.family, ($weight && font.weights[$weight]) || font.weights.regular, color.default.enabled.fg, color.default.enabled.placeholder, color.default.disabled.fg, color.default.disabled.placeholder, color.invalid.enabled.fg, color.invalid.enabled.placeholder);
}
function inputFontSizeStyle(props) {
    var theme = props.theme;
    var _a = theme.sanity, fonts = _a.fonts, media = _a.media;
    return helpers_1.responsive(media, helpers_1.getResponsiveProp(props.$fontSize, [2]), function (sizeIndex) {
        var size = fonts.text.sizes[sizeIndex] || fonts.text.sizes[2];
        return {
            fontSize: helpers_1.rem(size.fontSize),
            lineHeight: size.lineHeight / size.fontSize,
        };
    });
}
function representationStyle(props) {
    var $border = props.$border, $hasPrefix = props.$hasPrefix, $hasSuffix = props.$hasSuffix, theme = props.theme;
    var _a = theme.sanity, focusRing = _a.focusRing, input = _a.input;
    var color = theme.sanity.color.input;
    return styled_components_1.css(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    display: block;\n    pointer-events: none;\n    z-index: 0;\n\n    /* enabled */\n    *:not(:disabled) + & {\n      --card-bg-color: ", ";\n      --card-fg-color: ", ";\n      background-color: ", ";\n      box-shadow: ", ";\n    }\n\n    /* invalid */\n    *:not(:disabled):invalid + & {\n      --card-bg-color: ", ";\n      --card-fg-color: ", ";\n      background-color: ", ";\n      box-shadow: ", ";\n    }\n\n    /* focused */\n    *:not(:disabled):not(:read-only):focus + & {\n      box-shadow: ", ";\n    }\n\n    /* disabled */\n    *:disabled + & {\n      --card-bg-color: ", ";\n      --card-fg-color: ", ";\n      background-color: ", ";\n      box-shadow: ", ";\n    }\n\n    /* hovered */\n    @media (hover: hover) {\n      *:not(:disabled):not(:read-only):not(:invalid):hover + & {\n        --card-bg-color: ", ";\n        --card-fg-color: ", ";\n        background-color: ", ";\n      }\n\n      *:not(:disabled):not(:read-only):not(:invalid):not(:focus):hover + & {\n        box-shadow: ", ";\n      }\n    }\n\n    border-top-left-radius: ", ";\n    border-bottom-left-radius: ", ";\n    border-top-right-radius: ", ";\n    border-bottom-right-radius: ", ";\n  "], ["\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    display: block;\n    pointer-events: none;\n    z-index: 0;\n\n    /* enabled */\n    *:not(:disabled) + & {\n      --card-bg-color: ", ";\n      --card-fg-color: ", ";\n      background-color: ", ";\n      box-shadow: ",
        ";\n    }\n\n    /* invalid */\n    *:not(:disabled):invalid + & {\n      --card-bg-color: ", ";\n      --card-fg-color: ", ";\n      background-color: ", ";\n      box-shadow: ",
        ";\n    }\n\n    /* focused */\n    *:not(:disabled):not(:read-only):focus + & {\n      box-shadow: ",
        ";\n    }\n\n    /* disabled */\n    *:disabled + & {\n      --card-bg-color: ", ";\n      --card-fg-color: ", ";\n      background-color: ", ";\n      box-shadow: ",
        ";\n    }\n\n    /* hovered */\n    @media (hover: hover) {\n      *:not(:disabled):not(:read-only):not(:invalid):hover + & {\n        --card-bg-color: ", ";\n        --card-fg-color: ", ";\n        background-color: ", ";\n      }\n\n      *:not(:disabled):not(:read-only):not(:invalid):not(:focus):hover + & {\n        box-shadow: ",
        ";\n      }\n    }\n\n    border-top-left-radius: ", ";\n    border-bottom-left-radius: ", ";\n    border-top-right-radius: ", ";\n    border-bottom-right-radius: ", ";\n  "])), color.default.enabled.bg, color.default.enabled.fg, color.default.enabled.bg, $border
        ? focusRing_1.focusRingBorderStyle({ color: color.default.enabled.border, width: input.border.width })
        : undefined, color.invalid.enabled.bg, color.invalid.enabled.fg, color.invalid.enabled.bg, $border
        ? focusRing_1.focusRingBorderStyle({ color: color.invalid.enabled.border, width: input.border.width })
        : 'none', focusRing_1.focusRingStyle({
        border: $border
            ? { color: color.default.enabled.border, width: input.border.width }
            : undefined,
        focusRing: focusRing,
    }), color.default.disabled.bg, color.default.disabled.fg, color.default.disabled.bg, $border
        ? focusRing_1.focusRingBorderStyle({
            color: color.default.disabled.border,
            width: input.border.width,
        })
        : 'none', color.default.hovered.bg, color.default.hovered.fg, color.default.hovered.bg, $border
        ? focusRing_1.focusRingBorderStyle({
            color: color.default.hovered.border,
            width: input.border.width,
        })
        : 'none', $hasPrefix ? 0 : undefined, $hasPrefix ? 0 : undefined, $hasSuffix ? 0 : undefined, $hasSuffix ? 0 : undefined);
}
var templateObject_1, templateObject_2, templateObject_3;
//# sourceMappingURL=textInputStyle.js.map