"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Autocomplete = void 0;
var icons_1 = require("@sanity/icons");
var react_1 = __importStar(require("react"));
var constants_1 = require("../../constants");
var helpers_1 = require("../../helpers");
var hooks_1 = require("../../hooks");
var primitives_1 = require("../../primitives");
var autocompleteOption_1 = require("./autocompleteOption");
var styles_1 = require("./styles");
var defaultRenderValue = function (value, option) {
    return option ? option.value : value;
};
var defaultFilterOption = function (query, option) {
    return option.value.toLowerCase().indexOf(query.toLowerCase()) > -1;
};
var LIST_IGNORE_KEYS = [
    'Control',
    'Shift',
    'Alt',
    'Enter',
    'Home',
    'End',
    'PageUp',
    'PageDown',
    'Meta',
    'Tab',
    'CapsLock',
];
var InnerAutocomplete = react_1.forwardRef(function (props, ref) {
    var _a = props.border, border = _a === void 0 ? true : _a, filterOptionProp = props.filterOption, _b = props.fontSize, fontSize = _b === void 0 ? 2 : _b, icon = props.icon, id = props.id, loading = props.loading, onChange = props.onChange, onQueryChange = props.onQueryChange, onSelect = props.onSelect, openButton = props.openButton, optionsProp = props.options, _c = props.padding, paddingProp = _c === void 0 ? 3 : _c, _d = props.radius, radius = _d === void 0 ? 2 : _d, renderOptionProp = props.renderOption, _e = props.renderValue, renderValue = _e === void 0 ? defaultRenderValue : _e, _f = props.value, valueProp = _f === void 0 ? '' : _f, restProps = __rest(props, ["border", "filterOption", "fontSize", "icon", "id", "loading", "onChange", "onQueryChange", "onSelect", "openButton", "options", "padding", "radius", "renderOption", "renderValue", "value"]);
    var defaultRenderOption = react_1.useCallback(function (_a) {
        var value = _a.value;
        return (react_1.default.createElement(primitives_1.Card, { as: "button", padding: paddingProp, tone: "inherit" },
            react_1.default.createElement(primitives_1.Text, { size: fontSize }, value)));
    }, [fontSize, paddingProp]);
    var renderOption = typeof renderOptionProp === 'function' ? renderOptionProp : defaultRenderOption;
    var filterOption = typeof filterOptionProp === 'function' ? filterOptionProp : defaultFilterOption;
    var _g = react_1.useState(valueProp), value = _g[0], setValue = _g[1];
    var _h = react_1.useState(null), query = _h[0], setQuery = _h[1];
    var valueRef = react_1.useRef(value);
    var _j = react_1.useState(false), focused = _j[0], setFocused = _j[1];
    var listboxId = id + "-listbox";
    var options = Array.isArray(optionsProp) ? optionsProp : constants_1.EMPTY_ARRAY;
    var _k = react_1.useState(-1), selectedIndex = _k[0], setSelectedIndex = _k[1];
    var inputRef = react_1.useRef(null);
    var listRef = react_1.useRef(null);
    var activeItemId = selectedIndex > -1 ? id + "-option-" + selectedIndex : undefined;
    var padding = hooks_1.useResponsiveProp(paddingProp);
    var rootRef = react_1.useRef(null);
    var currentOption = value ? options.find(function (o) { return o.value === value; }) : undefined;
    var filteredOptions = react_1.useMemo(function () { return options.filter(function (option) { return (query ? filterOption(query, option) : true); }); }, [filterOption, options, query]);
    var optionsLen = filteredOptions.length;
    var expanded = loading || (focused && optionsLen > 0 && query !== null);
    var forwardedRef = hooks_1.useForwardedRef(ref);
    var handleRootBlur = react_1.useCallback(function () {
        setTimeout(function () {
            var rootEl = rootRef.current;
            var focusedEl = document.activeElement;
            var focusInside = rootEl && focusedEl && rootEl.contains(focusedEl);
            if (!focusInside)
                setFocused(false);
        }, 0);
    }, []);
    var handleRootKeyDown = react_1.useCallback(function (event) {
        var _a, _b;
        if (event.key === 'ArrowDown') {
            event.preventDefault();
            if (!optionsLen)
                return;
            setSelectedIndex(function (index) { return (index + 1) % optionsLen; });
            return;
        }
        if (event.key === 'ArrowUp') {
            event.preventDefault();
            if (!optionsLen)
                return;
            setSelectedIndex(function (index) {
                return index === -1 ? optionsLen - 1 : (optionsLen + index - 1) % optionsLen;
            });
            return;
        }
        if (event.key === 'Escape') {
            setFocused(false);
            valueRef.current = '';
            setQuery(null);
            if (onQueryChange)
                onQueryChange(null);
            (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.focus();
            return;
        }
        var target = event.target;
        var listEl = listRef.current;
        if ((listEl === target || (listEl === null || listEl === void 0 ? void 0 : listEl.contains(target))) &&
            !LIST_IGNORE_KEYS.includes(event.key)) {
            (_b = inputRef.current) === null || _b === void 0 ? void 0 : _b.focus();
            return;
        }
    }, [onQueryChange, optionsLen]);
    var handleInputChange = react_1.useCallback(function (event) {
        var q = event.currentTarget.value;
        valueRef.current = q;
        setQuery(q);
        if (onQueryChange)
            onQueryChange(q);
    }, [onQueryChange]);
    var handleInputFocus = react_1.useCallback(function () { return setFocused(true); }, []);
    var handleClearButtonClick = react_1.useCallback(function () {
        var _a;
        valueRef.current = '';
        setValue('');
        if (onChange)
            onChange('');
        setQuery(null);
        if (onQueryChange)
            onQueryChange(null);
        (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.focus();
    }, [onChange, onQueryChange]);
    var handleClearButtonFocus = react_1.useCallback(function () { return setFocused(true); }, []);
    var handleOptionSelect = react_1.useCallback(function (v) {
        var _a;
        if (onSelect)
            onSelect(v);
        setValue(v);
        if (onChange)
            onChange(v);
        setQuery(null);
        if (onQueryChange)
            onQueryChange(null);
        setFocused(false);
        (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.focus();
    }, [onChange, onSelect, onQueryChange]);
    var handleOpenClick = react_1.useCallback(function () {
        var _a;
        (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.focus();
        setQuery(query || '');
    }, [query]);
    // Change the value when `value` prop changes
    react_1.useEffect(function () {
        if (valueProp !== valueRef.current) {
            valueRef.current = valueProp;
            setValue(valueProp);
        }
    }, [valueProp]);
    // Reset selected item when the list changes
    // @todo: what if the list changed, but the items have changed?
    react_1.useEffect(function () { return setSelectedIndex(-1); }, [optionsLen]);
    // Focus the selected item
    react_1.useEffect(function () {
        var listElement = listRef.current;
        if (!listElement)
            return;
        var selectedItemElement = listElement.childNodes[selectedIndex];
        if (selectedItemElement) {
            helpers_1.focusFirstDescendant(selectedItemElement);
        }
    }, [selectedIndex]);
    var setRef = function (el) {
        inputRef.current = el;
        forwardedRef.current = el;
    };
    var clearButton = react_1.useMemo(function () {
        return value.length > 0
            ? {
                'aria-label': 'Clear',
                onFocus: handleClearButtonFocus,
            }
            : undefined;
    }, [handleClearButtonFocus, value]);
    return (react_1.default.createElement(styles_1.Root, { "data-ui": "Autocomplete", onBlur: handleRootBlur, onKeyDown: handleRootKeyDown, ref: rootRef },
        react_1.default.createElement(primitives_1.TextInput, __assign({}, restProps, { "aria-activedescendant": activeItemId, "aria-autocomplete": "list", "aria-expanded": expanded, "aria-owns": listboxId, autoCapitalize: "off", autoComplete: "off", autoCorrect: "off", border: border, clearButton: clearButton, icon: icon, id: id, inputMode: "search", onChange: handleInputChange, onClear: handleClearButtonClick, onFocus: handleInputFocus, padding: padding, radius: radius, ref: setRef, role: "combobox", fontSize: fontSize, spellCheck: false, suffix: openButton ? (react_1.default.createElement(primitives_1.Box, { padding: 1 },
                react_1.default.createElement(primitives_1.Button, { icon: icons_1.ChevronDownIcon, mode: "bleed", onClick: handleOpenClick, padding: 2 }))) : undefined, value: query === null ? renderValue(value, currentOption) : query })),
        react_1.default.createElement(styles_1.ListBoxContainer, { hidden: !expanded },
            react_1.default.createElement(styles_1.ListBoxCard, { paddingY: 1, radius: 1, shadow: 2, tabIndex: -1, tone: "inherit" },
                react_1.default.createElement("ul", { "aria-multiselectable": false, id: listboxId, ref: listRef, role: "listbox" }, filteredOptions.map(function (option, optionIndex) { return (react_1.default.createElement(autocompleteOption_1.AutocompleteOption, { id: id + "-option-" + optionIndex, key: optionIndex, onSelect: handleOptionSelect, selected: selectedIndex > -1 ? optionIndex === selectedIndex : currentOption === option, value: option.value }, react_1.cloneElement(renderOption(option), { disabled: loading, tabIndex: -1 }))); })),
                react_1.default.createElement(styles_1.LoadingCard, { padding: 3, style: { opacity: loading ? 0.5 : 0 } },
                    react_1.default.createElement(primitives_1.Spinner, null))))));
});
InnerAutocomplete.displayName = 'Autocomplete';
exports.Autocomplete = InnerAutocomplete;
//# sourceMappingURL=autocomplete.js.map